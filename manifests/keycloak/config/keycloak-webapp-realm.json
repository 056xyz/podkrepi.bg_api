{
  "accessCodeLifespan": 60,
  "accessCodeLifespanLogin": 1800,
  "accessCodeLifespanUserAction": 300,
  "accessTokenLifespan": 300,
  "accessTokenLifespanForImplicitFlow": 900,
  "accountTheme": "theme_podkrepi",
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "adminEventsDetailsEnabled": false,
  "adminEventsEnabled": false,
  "adminTheme": "keycloak",
  "attributes": {
    "cibaAuthRequestedUserHint": "login_hint",
    "cibaBackchannelTokenDeliveryMode": "poll",
    "cibaExpiresIn": "120",
    "cibaInterval": "5",
    "clientOfflineSessionIdleTimeout": "0",
    "clientOfflineSessionMaxLifespan": "0",
    "clientSessionIdleTimeout": "0",
    "clientSessionMaxLifespan": "0",
    "oauth2DeviceCodeLifespan": "600",
    "oauth2DevicePollingInterval": "5",
    "parRequestUriLifespan": "60",
    "userProfileEnabled": "false"
  },
  "authenticationFlows": [
    {
      "alias": "Account verification options",
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Authentication Options",
      "authenticationExecutions": [
        {
          "authenticator": "basic-auth",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "basic-auth-otp",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Authentication options.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Browser - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Direct Grant - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "First broker login - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Handle Existing Account",
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Account verification options",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Reset - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-otp",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "User creation or linking",
      "authenticationExecutions": [
        {
          "authenticator": "idp-create-user-if-unique",
          "authenticatorConfig": "create unique user config",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Handle Existing Account",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "First broker login - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "browser",
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 25,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "forms",
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "clients",
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-jwt",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-secret-jwt",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-x509",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 40,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true
    },
    {
      "alias": "direct grant",
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-password",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Direct Grant - Conditional OTP",
          "priority": 30,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "docker auth",
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "first broker login",
      "authenticationExecutions": [
        {
          "authenticator": "idp-review-profile",
          "authenticatorConfig": "review profile config",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "User creation or linking",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "forms",
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Browser - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "http challenge",
      "authenticationExecutions": [
        {
          "authenticator": "no-cookie-redirect",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Authentication Options",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "registration",
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "registration form",
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "registration form",
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-profile-action",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 40,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-password-action",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 50,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 60,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false
    },
    {
      "alias": "reset credentials",
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-credential-email",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-password",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Reset - Conditional OTP",
          "priority": 40,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "saml ecp",
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true
    }
  ],
  "authenticatorConfig": [
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "browserFlow": "browser",
  "browserSecurityHeaders": {
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "contentSecurityPolicyReportOnly": "",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains",
    "xContentTypeOptions": "nosniff",
    "xFrameOptions": "SAMEORIGIN",
    "xRobotsTag": "none",
    "xXSSProtection": "1; mode=block"
  },
  "bruteForceProtected": false,
  "clientAuthenticationFlow": "clients",
  "clientOfflineSessionIdleTimeout": 0,
  "clientOfflineSessionMaxLifespan": 0,
  "clientPolicies": {
    "policies": []
  },
  "clientProfiles": {
    "profiles": []
  },
  "clients": [
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "backchannel.logout.revoke.offline.tokens": "false",
        "backchannel.logout.session.required": "false",
        "client_credentials.use_refresh_token": "false",
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "id.token.as.detached.signature": "false",
        "oauth2.device.authorization.grant.enabled": "false",
        "oidc.ciba.grant.enabled": "false",
        "require.pushed.authorization.requests": "false",
        "saml_force_name_id_format": "false",
        "saml.artifact.binding": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "use.refresh.tokens": "true"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/realms/webapp/account/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "account",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_account}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "picture",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "picture",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": [
        "http://localhost:3040/*",
        "https://dev.podkrepi.bg/*",
        "https://podkrepi.bg/*",
        "/realms/webapp/account/*"
      ],
      "rootUrl": "${authBaseUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": ["https://dev.podkrepi.bg", "https://podkrepi.bg", "http://localhost:3040"]
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/realms/webapp/account/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "account-console",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_account-console}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {},
          "consentRequired": false,
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": ["/realms/webapp/account/*"],
      "rootUrl": "${authBaseUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "backchannel.logout.revoke.offline.tokens": "false",
        "backchannel.logout.session.required": "false",
        "client_credentials.use_refresh_token": "false",
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "id.token.as.detached.signature": "false",
        "oauth2.device.authorization.grant.enabled": "false",
        "oidc.ciba.grant.enabled": "false",
        "require.pushed.authorization.requests": "false",
        "saml_force_name_id_format": "false",
        "saml.artifact.binding": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "use.refresh.tokens": "true"
      },
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "admin-cli",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_admin-cli}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientId",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientId",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientAddress",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientHost",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        }
      ],
      "publicClient": false,
      "redirectUris": [],
      "secret": "**********",
      "serviceAccountsEnabled": true,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "broker",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_broker}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "access.token.lifespan": "300",
        "acr.loa.map": "{}",
        "backchannel.logout.revoke.offline.tokens": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "id.token.as.detached.signature": "false",
        "oauth2.device.authorization.grant.enabled": "true",
        "oidc.ciba.grant.enabled": "false",
        "require.pushed.authorization.requests": "false",
        "saml_force_name_id_format": "false",
        "saml.artifact.binding": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "token.response.type.bearer.lower-case": "false",
        "use.refresh.tokens": "true"
      },
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "jwt-headless",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "description": "",
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": true,
      "implicitFlowEnabled": false,
      "name": "Podkrepi.bg API",
      "nodeReRegistrationTimeout": -1,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientHost",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "theme",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "theme",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "theme",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientAddress",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "picture",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "picture",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientId",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientId",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        }
      ],
      "publicClient": false,
      "redirectUris": ["http://localhost:5010/*"],
      "rootUrl": "http://localhost:8180",
      "secret": "DEV-KEYCLOAK-SECRET",
      "serviceAccountsEnabled": true,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": ["*"]
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "authorizationServicesEnabled": true,
      "authorizationSettings": {
        "allowRemoteResourceManagement": false,
        "decisionStrategy": "UNANIMOUS",
        "policies": [
          {
            "config": {
              "clients": "[\"jwt-headless\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "description": "for google sign-in",
            "logic": "POSITIVE",
            "name": "google-exchange-policy",
            "type": "client"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"manage\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "manage.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"configure\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "configure.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"view\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "view.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"map-roles\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "map-roles.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"map-roles-client-scope\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "map-roles-client-scope.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"map-roles-composite\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "map-roles-composite.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "applyPolicies": "[\"google-exchange-policy\"]",
              "resources": "[\"client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd\"]",
              "scopes": "[\"token-exchange\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "token-exchange.permission.client.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "type": "scope"
          },
          {
            "config": {
              "applyPolicies": "[\"google-exchange-policy\"]",
              "resources": "[\"idp.resource.b0c98400-ac9f-4c56-8d07-44bd869809d3\"]",
              "scopes": "[\"token-exchange\"]"
            },
            "decisionStrategy": "UNANIMOUS",
            "logic": "POSITIVE",
            "name": "token-exchange.permission.idp.b0c98400-ac9f-4c56-8d07-44bd869809d3",
            "type": "scope"
          }
        ],
        "policyEnforcementMode": "ENFORCING",
        "resources": [
          {
            "_id": "1c989ea8-db8e-45d4-b911-e1e623abf9df",
            "attributes": {},
            "name": "client.resource.b3eeab1e-0dac-45e4-9573-257f800709cd",
            "ownerManagedAccess": false,
            "scopes": [
              {
                "name": "view"
              },
              {
                "name": "map-roles-client-scope"
              },
              {
                "name": "map-roles"
              },
              {
                "name": "configure"
              },
              {
                "name": "manage"
              },
              {
                "name": "token-exchange"
              },
              {
                "name": "map-roles-composite"
              }
            ],
            "type": "Client",
            "uris": []
          },
          {
            "_id": "16f013bb-c544-4653-8815-8c66be843e37",
            "attributes": {},
            "name": "idp.resource.b0c98400-ac9f-4c56-8d07-44bd869809d3",
            "ownerManagedAccess": false,
            "scopes": [
              {
                "name": "token-exchange"
              }
            ],
            "type": "IdentityProvider",
            "uris": []
          }
        ],
        "scopes": [
          {
            "name": "manage"
          },
          {
            "name": "view"
          },
          {
            "name": "map-roles"
          },
          {
            "name": "map-roles-client-scope"
          },
          {
            "name": "map-roles-composite"
          },
          {
            "name": "configure"
          },
          {
            "name": "token-exchange"
          }
        ]
      },
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "realm-management",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_realm-management}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/admin/webapp/console/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "security-admin-console",
      "consentRequired": false,
      "defaultClientScopes": ["web-origins", "profile", "roles", "email"],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_security-admin-console}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": ["/admin/webapp/console/*"],
      "rootUrl": "${authAdminUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": ["+"]
    }
  ],
  "clientScopeMappings": {
    "account": [
      {
        "client": "account-console",
        "roles": ["manage-account"]
      }
    ]
  },
  "clientScopes": [
    {
      "attributes": {
        "consent.screen.text": "${addressScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: address",
      "name": "address",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "user.attribute.country": "country",
            "user.attribute.formatted": "formatted",
            "user.attribute.locality": "locality",
            "user.attribute.postal_code": "postal_code",
            "user.attribute.region": "region",
            "user.attribute.street": "street",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-address-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "SAML role list",
      "name": "role_list",
      "protocol": "saml",
      "protocolMappers": [
        {
          "config": {
            "attribute.name": "Role",
            "attribute.nameformat": "Basic",
            "single": "false"
          },
          "consentRequired": false,
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "",
        "display.on.consent.screen": "false",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "name": "web-origins",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {},
          "consentRequired": false,
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper"
        }
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "include.in.token.scope": "true"
      },
      "description": "Microprofile - JWT built-in scope",
      "name": "microprofile-jwt",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "upn",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "upn",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "groups",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "groups",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${emailScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: email",
      "name": "email",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "email",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email_verified",
            "id.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "emailVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        }
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "name": "admin",
      "protocol": "openid-connect"
    },
    {
      "attributes": {
        "consent.screen.text": "${profileScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: profile",
      "name": "profile",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "given_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "firstName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "zoneinfo",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "zoneinfo",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "zoneinfo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "nickname",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "nickname",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "nickname",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "website",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "website",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "website",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "picture",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "picture",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "updated_at",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "updatedAt",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "updated at",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "family_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "lastName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "profile",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "profile",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "middle_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "middleName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "middle name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "gender",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "gender",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "gender",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "birthdate",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "birthdate",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "birthdate",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${phoneScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: phone",
      "name": "phone",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number_verified",
            "id.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "phoneNumberVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "phoneNumber",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "OpenID Connect built-in scope: offline_access",
      "name": "offline_access",
      "protocol": "openid-connect"
    },
    {
      "attributes": {
        "consent.screen.text": "${rolesScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add user roles to the access token",
      "name": "roles",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "resource_access.${client_id}.roles",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "client roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper"
        },
        {
          "config": {},
          "consentRequired": false,
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        }
      ]
    }
  ],
  "clientSessionIdleTimeout": 0,
  "clientSessionMaxLifespan": 0,
  "components": {
    "org.keycloak.keys.KeyProvider": [
      {
        "config": {
          "algorithm": ["HS256"],
          "priority": ["100"]
        },
        "name": "hmac-generated",
        "providerId": "hmac-generated",
        "subComponents": {}
      },
      {
        "config": {
          "priority": ["100"]
        },
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {}
      },
      {
        "config": {
          "priority": ["100"]
        },
        "name": "rsa-enc-generated",
        "providerId": "rsa-generated",
        "subComponents": {}
      },
      {
        "config": {
          "priority": ["100"]
        },
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {}
      }
    ],
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-user-property-mapper",
            "oidc-usermodel-property-mapper",
            "oidc-full-name-mapper",
            "saml-role-list-mapper",
            "saml-user-attribute-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-address-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {
          "allow-default-scopes": ["true"]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "max-clients": ["200"]
        },
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allow-default-scopes": ["true"]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {},
        "name": "Consent Required",
        "providerId": "consent-required",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "client-uris-must-match": ["true"],
          "host-sending-registration-request-must-match": ["true"]
        },
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-user-attribute-mapper",
            "oidc-address-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-property-mapper",
            "oidc-full-name-mapper",
            "saml-role-list-mapper",
            "saml-user-property-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {},
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subComponents": {},
        "subType": "anonymous"
      }
    ],
    "org.keycloak.userprofile.UserProfileProvider": [
      {
        "config": {},
        "providerId": "declarative-user-profile",
        "subComponents": {}
      }
    ]
  },
  "defaultDefaultClientScopes": ["role_list", "profile", "email", "roles", "web-origins"],
  "defaultGroups": ["/coordinators"],
  "defaultLocale": "bg",
  "defaultOptionalClientScopes": ["offline_access", "address", "phone", "microprofile-jwt"],
  "defaultRole": {
    "clientRole": false,
    "composite": true,
    "containerId": "webapp",
    "description": "${role_default-roles}",
    "name": "default-roles-webapp"
  },
  "defaultSignatureAlgorithm": "RS256",
  "directGrantFlow": "direct grant",
  "displayName": "Podkrepi.bg",
  "displayNameHtml": "<div class=\"kc-logo-text\"></div>",
  "dockerAuthenticationFlow": "docker auth",
  "duplicateEmailsAllowed": false,
  "editUsernameAllowed": false,
  "emailTheme": "theme_podkrepi",
  "enabled": true,
  "enabledEventTypes": [],
  "eventsEnabled": false,
  "eventsListeners": ["jboss-logging"],
  "failureFactor": 30,
  "groups": [
    {
      "attributes": {},
      "clientRoles": {},
      "name": "coordinators",
      "path": "/coordinators",
      "realmRoles": [],
      "subGroups": []
    },
    {
      "attributes": {},
      "clientRoles": {},
      "name": "podkrepi-dev-local",
      "path": "/podkrepi-dev-local",
      "realmRoles": [],
      "subGroups": []
    },
    {
      "attributes": {
        "theme": ["dark"]
      },
      "clientRoles": {
        "account": ["account-view-contact-requests", "account-view-supporters"]
      },
      "name": "podkrepi-team",
      "path": "/podkrepi-team",
      "realmRoles": ["team-support"],
      "subGroups": []
    },
    {
      "attributes": {},
      "clientRoles": {},
      "name": "supporters",
      "path": "/supporters",
      "realmRoles": [],
      "subGroups": []
    }
  ],
  "id": "webapp",
  "identityProviderMappers": [],
  "identityProviders": [
    {
      "addReadTokenRoleOnCreate": true,
      "alias": "google",
      "authenticateByDefault": false,
      "config": {
        "clientId": "756212419276-aufcpnre589nf6lm9eca88l9ieq0jhcg.apps.googleusercontent.com",
        "clientSecret": "**********",
        "syncMode": "IMPORT",
        "useJwksUrl": "true"
      },
      "enabled": true,
      "firstBrokerLoginFlowAlias": "first broker login",
      "internalId": "b0c98400-ac9f-4c56-8d07-44bd869809d3",
      "linkOnly": false,
      "providerId": "google",
      "storeToken": true,
      "trustEmail": false,
      "updateProfileFirstLoginMode": "on"
    }
  ],
  "internationalizationEnabled": true,
  "keycloakVersion": "17.0.1",
  "loginTheme": "theme_podkrepi",
  "loginWithEmailAllowed": true,
  "maxDeltaTimeSeconds": 43200,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "notBefore": 0,
  "oauth2DeviceCodeLifespan": 600,
  "oauth2DevicePollingInterval": 5,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespan": 5184000,
  "offlineSessionMaxLifespanEnabled": false,
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyDigits": 6,
  "otpPolicyInitialCounter": 0,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "otpPolicyType": "totp",
  "otpSupportedApplications": ["FreeOTP", "Google Authenticator"],
  "passwordPolicy": "length(8) and specialChars(1) and upperCase(1) and digits(1)",
  "permanentLockout": false,
  "quickLoginCheckMilliSeconds": 1000,
  "realm": "webapp",
  "refreshTokenMaxReuse": 0,
  "registrationAllowed": true,
  "registrationEmailAsUsername": true,
  "registrationFlow": "registration",
  "rememberMe": true,
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Configure OTP",
      "priority": 10,
      "providerId": "CONFIGURE_TOTP"
    },
    {
      "alias": "terms_and_conditions",
      "config": {},
      "defaultAction": false,
      "enabled": false,
      "name": "Terms and Conditions",
      "priority": 20,
      "providerId": "terms_and_conditions"
    },
    {
      "alias": "UPDATE_PASSWORD",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Password",
      "priority": 30,
      "providerId": "UPDATE_PASSWORD"
    },
    {
      "alias": "UPDATE_PROFILE",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Profile",
      "priority": 40,
      "providerId": "UPDATE_PROFILE"
    },
    {
      "alias": "VERIFY_EMAIL",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Verify Email",
      "priority": 50,
      "providerId": "VERIFY_EMAIL"
    },
    {
      "alias": "delete_account",
      "config": {},
      "defaultAction": false,
      "enabled": false,
      "name": "Delete Account",
      "priority": 60,
      "providerId": "delete_account"
    },
    {
      "alias": "update_user_locale",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update User Locale",
      "priority": 1000,
      "providerId": "update_user_locale"
    }
  ],
  "requiredCredentials": ["password"],
  "resetCredentialsFlow": "reset credentials",
  "resetPasswordAllowed": true,
  "revokeRefreshToken": false,
  "roles": {
    "client": {
      "account": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_view-profile}",
          "name": "view-profile"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_delete-account}",
          "name": "delete-account"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_manage-account-links}",
          "name": "manage-account-links"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "account": ["manage-account-links"]
            }
          },
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_manage-account}",
          "name": "manage-account"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_view-applications}",
          "name": "view-applications"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "name": "account-view-contact-requests"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "name": "account-view-supporters"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "account": ["view-consent"]
            }
          },
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_manage-consent}",
          "name": "manage-consent"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7d3a41ad-94c1-491b-9464-14629a88159a",
          "description": "${role_view-consent}",
          "name": "view-consent"
        }
      ],
      "account-console": [],
      "admin-cli": [],
      "broker": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "a07d8338-9588-49f5-8bfb-be50dbbccff5",
          "description": "${role_read-token}",
          "name": "read-token"
        }
      ],
      "jwt-headless": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "b3eeab1e-0dac-45e4-9573-257f800709cd",
          "name": "uma_protection"
        }
      ],
      "realm-management": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_create-client}",
          "name": "create-client"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-clients}",
          "name": "manage-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-identity-providers}",
          "name": "manage-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_query-groups}",
          "name": "query-groups"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_query-clients}",
          "name": "query-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-authorization}",
          "name": "view-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": ["query-clients"]
            }
          },
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-clients}",
          "name": "view-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-realm}",
          "name": "view-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-authorization}",
          "name": "manage-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_impersonation}",
          "name": "impersonation"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-realm}",
          "name": "manage-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_query-realms}",
          "name": "query-realms"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-users}",
          "name": "manage-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-events}",
          "name": "view-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_query-users}",
          "name": "query-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": ["query-groups", "query-users"]
            }
          },
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-users}",
          "name": "view-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_manage-events}",
          "name": "manage-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "manage-clients",
                "create-client",
                "query-groups",
                "manage-identity-providers",
                "query-clients",
                "view-authorization",
                "view-realm",
                "view-clients",
                "manage-authorization",
                "impersonation",
                "manage-realm",
                "query-realms",
                "view-events",
                "manage-users",
                "query-users",
                "view-users",
                "manage-events",
                "view-identity-providers"
              ]
            }
          },
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_realm-admin}",
          "name": "realm-admin"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "f1af5d8b-5cde-4073-b63d-b77bad9b4add",
          "description": "${role_view-identity-providers}",
          "name": "view-identity-providers"
        }
      ],
      "security-admin-console": []
    },
    "realm": [
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "description": "${role_uma_authorization}",
        "name": "uma_authorization"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": true,
        "composites": {
          "realm": ["view-supporters", "view-contact-requests"]
        },
        "containerId": "webapp",
        "name": "team-support"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "account": ["view-profile", "manage-account"]
          },
          "realm": ["offline_access", "uma_authorization"]
        },
        "containerId": "webapp",
        "description": "${role_default-roles}",
        "name": "default-roles-webapp"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "name": "view-contact-requests"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "description": "${role_offline-access}",
        "name": "offline_access"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "name": "view-supporters"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "description": "Can review all campaigns and approve activities on them.",
        "name": "campaign-reviewer"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "webapp",
        "description": "Can configure the Podkrepi.bg platform, add currencies, cities, etc",
        "name": "podkrepi-admin"
      }
    ]
  },
  "scopeMappings": [
    {
      "client": "account",
      "roles": ["view-supporters", "view-contact-requests"]
    },
    {
      "clientScope": "admin",
      "roles": ["team-support"]
    },
    {
      "clientScope": "offline_access",
      "roles": ["offline_access"]
    }
  ],
  "smtpServer": {
    "auth": "true",
    "from": "info@podkrepi.bg",
    "fromDisplayName": "Podkrepi.bg",
    "host": "email-smtp.eu-central-1.amazonaws.com",
    "password": "**********",
    "port": "465",
    "ssl": "true",
    "starttls": "",
    "user": "CONFIGURE_FROM_UI"
  },
  "sslRequired": "external",
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionIdleTimeoutRememberMe": 0,
  "ssoSessionMaxLifespan": 36000,
  "ssoSessionMaxLifespanRememberMe": 0,
  "supportedLocales": ["bg", "en"],
  "userManagedAccessAllowed": true,
  "users": [
    {
      "createdTimestamp": 1633600139625,
      "disableableCredentialTypes": [],
      "emailVerified": false,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": ["default-roles-webapp"],
      "requiredActions": ["VERIFY_EMAIL"],
      "serviceAccountClientId": "admin-cli",
      "totp": false,
      "username": "service-account-admin-cli"
    },
    {
      "clientRoles": {
        "jwt-headless": ["uma_protection"],
        "realm-management": ["manage-users"]
      },
      "createdTimestamp": 1633496114712,
      "disableableCredentialTypes": [],
      "emailVerified": true,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": ["default-roles-webapp"],
      "requiredActions": [],
      "serviceAccountClientId": "jwt-headless",
      "totp": false,
      "username": "service-account-jwt-headless"
    },
    {
      "credentials": [
        {
          "type": "password",
          "value": "$ecurePa33"
        }
      ],
      "email": "coordinator@podkrepi.bg",
      "emailVerified": true,
      "enabled": true,
      "firstName": "Coordinator",
      "groups": ["coordinators", "podkrepi-dev-local"],
      "id": "81d93c73-db28-4402-8ec0-a5b1709ed1cf",
      "lastName": "Dev",
      "notBefore": 0,
      "realmRoles": [],
      "username": "coordinator@podkrepi.bg"
    },
    {
      "credentials": [
        {
          "type": "password",
          "value": "$ecurePa33"
        }
      ],
      "email": "giver@podkrepi.bg",
      "emailVerified": true,
      "enabled": true,
      "firstName": "Giver",
      "groups": ["podkrepi-dev-local"],
      "id": "190486ff-7f0e-4e28-94ca-b624726b5389",
      "lastName": "Dev",
      "notBefore": 0,
      "realmRoles": [],
      "username": "giver@podkrepi.bg"
    },
    {
      "credentials": [
        {
          "type": "password",
          "value": "$ecurePa33"
        }
      ],
      "email": "receiver@podkrepi.bg",
      "emailVerified": true,
      "enabled": true,
      "firstName": "Receiver",
      "groups": ["podkrepi-dev-local"],
      "id": "6c688460-73ec-414c-8252-986b0658002b",
      "lastName": "Dev",
      "notBefore": 0,
      "realmRoles": [],
      "username": "receiver@podkrepi.bg"
    },
    {
      "credentials": [
        {
          "type": "password",
          "value": "$ecurePa33"
        }
      ],
      "email": "reviewer@podkrepi.bg",
      "emailVerified": true,
      "enabled": true,
      "firstName": "Reviewer",
      "groups": ["podkrepi-dev-local"],
      "id": "36bec201-b203-46ad-a8c3-43a0128c73e1",
      "lastName": "Dev",
      "notBefore": 0,
      "realmRoles": ["campaign-reviewer", "team-support"],
      "username": "reviewer@podkrepi.bg"
    },
    {
      "credentials": [
        {
          "type": "password",
          "value": "$ecurePa33"
        }
      ],
      "email": "admin@podkrepi.bg",
      "emailVerified": true,
      "enabled": true,
      "firstName": "Admin",
      "groups": ["podkrepi-dev-local"],
      "id": "6892fe15-d116-4aec-a417-82ebd990b63a",
      "lastName": "Dev",
      "notBefore": 0,
      "realmRoles": ["team-support", "podkrepi-admin"],
      "username": "admin@podkrepi.bg"
    }
  ],
  "verifyEmail": false,
  "waitIncrementSeconds": 60,
  "webAuthnPolicyAcceptableAaguids": [],
  "webAuthnPolicyAttestationConveyancePreference": "not specified",
  "webAuthnPolicyAuthenticatorAttachment": "not specified",
  "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyCreateTimeout": 0,
  "webAuthnPolicyPasswordlessAcceptableAaguids": [],
  "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
  "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
  "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyPasswordlessCreateTimeout": 0,
  "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
  "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
  "webAuthnPolicyPasswordlessRpId": "",
  "webAuthnPolicyPasswordlessSignatureAlgorithms": ["ES256"],
  "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
  "webAuthnPolicyRequireResidentKey": "not specified",
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicyRpId": "",
  "webAuthnPolicySignatureAlgorithms": ["ES256"],
  "webAuthnPolicyUserVerificationRequirement": "not specified"
}
