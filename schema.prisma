generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String        @map("first_name") @db.VarChar(100)
  lastName       String        @map("last_name") @db.VarChar(100)
  email          String        @unique @db.Citext
  emailConfirmed Boolean?      @default(false) @map("email_confirmed")
  phone          String?       @db.VarChar(50)
  company        String?       @db.VarChar(50)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @map("updated_at") @db.Timestamptz(6)
  newsletter     Boolean?      @default(false)
  address        String?       @db.VarChar(50)
  birthday       DateTime?     @db.Timestamptz(6)
  Beneficiary    Beneficiary[]
  InfoRequest    InfoRequest[]
  Coordinator    Coordinator[]
  Supporter      Supporter[]

  @@map("people")
}

model Coordinator {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId    String        @map("person_id") @db.Uuid
  person      Person        @relation(fields: [personId], references: [id])
  Beneficiary Beneficiary[]

  @@map("coordinators")
}

model Beneficiary {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                BeneficiaryType
  /// Person in need
  personId            String          @map("person_id") @db.Uuid
  /// Coordinator for this beneficiary
  coordinatorId       String          @map("coordinator_id") @db.Uuid
  countryCode         String          @map("country_code") @db.Citext
  cityId              String          @map("city_id") @db.Uuid
  description         String?         @db.VarChar(1000)
  publicData          Json?           @map("public_data")
  privateData         Json?           @map("private_data")
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?       @map("updated_at") @db.Timestamptz(6)
  coordinatorRelation PersonRelation  @default(none) @map("coordinator_relation")
  city                City            @relation(fields: [cityId], references: [id])
  coordinator         Coordinator     @relation(fields: [coordinatorId], references: [id])
  person              Person          @relation(fields: [personId], references: [id])
  campaigns           Campaign[]

  @@map("beneficiaries")
}

model CampaignType {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String         @db.VarChar(50)
  slug        String         @unique @db.VarChar(50)
  description String?        @db.VarChar(200)
  parentId    String?        @map("parent_id") @db.Uuid
  parent      CampaignType?  @relation("ParentCategory", fields: [parentId], references: [id])
  children    CampaignType[] @relation("ParentCategory")
  campaigns   Campaign[]

  @@map("campaign_types")
}

model Campaign {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state          CampaignState @default(draft)
  slug           String        @unique @db.VarChar(250)
  title          String        @db.VarChar(200)
  essence        String        @default("") @db.VarChar(500)
  coordinatorId  String        @map("coordinator_id") @db.Uuid
  beneficiaryId  String        @map("beneficiary_id") @db.Uuid
  campaignTypeId String        @map("campaign_type_id") @db.Uuid
  description    String?
  targetAmount   Decimal?      @map("target_amount") @db.Decimal
  currency       String?       @default("BGN") @db.VarChar(3)
  startDate      DateTime?     @map("start_date") @db.Timestamptz(6)
  endDate        DateTime?     @map("end_date") @db.Timestamptz(6)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?     @map("deleted_at") @db.Timestamptz(6)
  beneficiary    Beneficiary   @relation(fields: [beneficiaryId], references: [id])
  campaignTypes  CampaignType  @relation(fields: [campaignTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([campaignTypeId])
  @@map("campaigns")
}

model InfoRequest {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId  String    @map("person_id") @db.Uuid
  message   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  person    Person    @relation(fields: [personId], references: [id])

  @@map("info_requests")
}

model Supporter {
  id                           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId                     String    @map("person_id") @db.Uuid
  createdAt                    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime? @map("updated_at") @db.Timestamptz(6)
  deletedAt                    DateTime? @map("deleted_at") @db.Timestamptz(6)
  comment                      String?   @db.VarChar(500)
  associationMember            Boolean   @default(false) @map("association_member")
  benefactorCampaign           Boolean   @default(false) @map("benefactor_campaign")
  benefactorPlatform           Boolean   @default(false) @map("benefactor_platform")
  companyOtherText             String?   @map("company_other_text") @db.VarChar(100)
  companySponsor               Boolean   @default(false) @map("company_sponsor")
  companyVolunteer             Boolean   @default(false) @map("company_volunteer")
  partnerBussiness             Boolean   @default(false) @map("partner_bussiness")
  partnerNpo                   Boolean   @default(false) @map("partner_npo")
  partnerOtherText             String?   @map("partner_other_text") @db.VarChar(100)
  roleAssociationMember        Boolean   @default(false) @map("role_association_member")
  roleBenefactor               Boolean   @default(false) @map("role_benefactor")
  roleCompany                  Boolean   @default(false) @map("role_company")
  rolePartner                  Boolean   @default(false) @map("role_partner")
  roleVolunteer                Boolean   @default(false) @map("role_volunteer")
  volunteerBackend             Boolean   @default(false) @map("volunteer_backend")
  volunteerDesigner            Boolean   @default(false) @map("volunteer_designer")
  volunteerDevOps              Boolean   @default(false) @map("volunteer_dev_ops")
  volunteerFinancesAndAccounts Boolean   @default(false) @map("volunteer_finances_and_accounts")
  volunteerFrontend            Boolean   @default(false) @map("volunteer_frontend")
  volunteerLawyer              Boolean   @default(false) @map("volunteer_lawyer")
  volunteerMarketing           Boolean   @default(false) @map("volunteer_marketing")
  volunteerProjectManager      Boolean   @default(false) @map("volunteer_project_manager")
  volunteerQa                  Boolean   @default(false) @map("volunteer_qa")
  volunteerSecurity            Boolean   @default(false) @map("volunteer_security")
  person                       Person    @relation(fields: [personId], references: [id])

  @@map("supporters")
}

model City {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(100)
  postalCode  Int           @unique @map("postal_code")
  countryId   String        @map("country_id") @db.Uuid
  countryCode Country       @relation(fields: [countryId], references: [id])
  Beneficiary Beneficiary[]

  @@map("cities")
}

model Country {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @db.VarChar(100)
  countryCode String @unique @map("country_code") @db.Citext
  City        City[]

  @@map("countries")
}

enum BeneficiaryType {
  individual
  organisation

  @@map("beneficiary_type")
}

/// https://developers.google.com/people/api/rest/v1/people?hl=pt#relation
enum PersonRelation {
  none
  parent
  spouse
  child
  mother
  father
  brother
  sister
  friend
  relative
  partner
  domesticPartner
  manager
  assistant
  colleague

  @@map("person_relation")
}

enum CampaignState {
  initial
  draft
  pending_validation
  approved
  rejected
  active
  active_pending_validation
  suspended
  complete
  disabled
  error
  deleted

  @@map("campaign_state")
}
