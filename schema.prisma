datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "."
  outputName          = "podkrepi.dbml"
  projectName         = "Podkrepi.bg"
  projectDatabaseType = "PostgreSQL"
}

/// Generic person object
model Person {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String         @map("first_name") @db.VarChar(100)
  lastName       String         @map("last_name") @db.VarChar(100)
  email          String         @unique @db.Citext
  emailConfirmed Boolean?       @default(false) @map("email_confirmed")
  phone          String?        @db.VarChar(50)
  company        String?        @db.VarChar(50)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  newsletter     Boolean?       @default(false)
  address        String?        @db.VarChar(100)
  birthday       DateTime?      @db.Timestamptz(6)
  /// Uniform Civil Number (NCN, EGN)
  /// https://en.wikipedia.org/wiki/National_identification_number#Bulgaria
  personalNumber String?        @unique @map("personal_number")
  vaultId        String?        @map("vault_id") @db.Uuid
  vault          Vault?         @relation(fields: [vaultId], references: [id])
  Document       Document[]
  Transfer       Transfer[]
  Campaign       Campaign[]
  Supporter      Supporter[]
  Benefactor     Benefactor[]
  Beneficiary    Beneficiary[]
  InfoRequest    InfoRequest[]
  Coordinator    Coordinator[]
  Subscription   Subscription[]

  @@map("people")
}

model Company {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyName     String    @map("company_name") @db.VarChar(100)
  /// BULSTAT Unified Identification Code (UIC)
  /// https://psc.egov.bg/en/psc-starting-a-business-bulstat
  companyNumber   String    @unique
  legalPersonName String?   @map("legal_person_name")
  countryCode     String?   @map("country_code") @db.Citext
  cityId          String?   @map("city_id") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  Beneficiary Beneficiary[]
  @@map("companies")
}

/// Coordinator is the person who manages the campaign on behalf of the Beneficiary
/// Alias: Organizer
model Coordinator {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId    String        @map("person_id") @db.Uuid
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(6)
  person      Person        @relation(fields: [personId], references: [id])
  Beneficiary Beneficiary[]

  @@map("coordinators")
}

/// Benefactor is the person who gives money
model Benefactor {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId   String    @map("person_id") @db.Uuid
  /// Payment provider customer id
  customerId String?   @unique @map("customer_id")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  person     Person    @relation(fields: [personId], references: [id])

  @@map("benefactors")
}

/// Beneficiary is the person who receives the benefit
model Beneficiary {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                BeneficiaryType
  /// Person in need when type is `individual`
  personId            String?         @map("person_id") @db.Uuid
  /// Company in need when type is `company`
  companyId           String?         @map("company_id") @db.Uuid
  /// Coordinator for this beneficiary
  coordinatorId       String          @map("coordinator_id") @db.Uuid
  countryCode         String          @map("country_code") @db.Citext
  cityId              String          @map("city_id") @db.Uuid
  description         String?
  publicData          Json?           @map("public_data")
  privateData         Json?           @map("private_data")
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(6)
  coordinatorRelation PersonRelation  @default(none) @map("coordinator_relation")
  city                City            @relation(fields: [cityId], references: [id])
  coordinator         Coordinator     @relation(fields: [coordinatorId], references: [id])
  person              Person?         @relation(fields: [personId], references: [id])
  company             Company?        @relation(fields: [companyId], references: [id])
  campaigns           Campaign[]

  @@map("beneficiaries")
}

model CampaignType {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String         @db.VarChar(50)
  slug        String         @unique @db.VarChar(50)
  description String?        @db.VarChar(200)
  parentId    String?        @map("parent_id") @db.Uuid
  parent      CampaignType?  @relation("ParentCategory", fields: [parentId], references: [id])
  children    CampaignType[] @relation("ParentCategory")
  campaigns   Campaign[]

  @@map("campaign_types")
}

model Campaign {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state          CampaignState @default(draft)
  slug           String        @unique @db.VarChar(250)
  title          String        @db.VarChar(200)
  essence        String        @db.VarChar(500)
  vaultId        String?       @map("vault_id") @db.Uuid
  coordinatorId  String        @map("coordinator_id") @db.Uuid
  beneficiaryId  String        @map("beneficiary_id") @db.Uuid
  campaignTypeId String        @map("campaign_type_id") @db.Uuid
  aprovedById    String?       @map("approved_by_id") @db.Uuid
  description    String?
  targetAmount   Decimal?      @default(0) @map("target_amount") @db.Decimal
  reachedAmount  Decimal?      @default(0) @map("reached_amount") @db.Decimal
  currency       Currency?     @default(BGN)
  startDate      DateTime?     @map("start_date") @db.Timestamptz(6)
  endDate        DateTime?     @map("end_date") @db.Timestamptz(6)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?     @map("deleted_at") @db.Timestamptz(6)
  vault          Vault?        @relation(fields: [vaultId], references: [id])
  approvedBy     Person?       @relation(fields: [aprovedById], references: [id])
  beneficiary    Beneficiary   @relation(fields: [beneficiaryId], references: [id])
  campaignTypes  CampaignType  @relation(fields: [campaignTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([campaignTypeId])
  @@map("campaigns")
}

model InfoRequest {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId  String    @map("person_id") @db.Uuid
  message   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  person    Person    @relation(fields: [personId], references: [id])

  @@map("info_requests")
}

model Supporter {
  id                           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personId                     String    @map("person_id") @db.Uuid
  createdAt                    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                    DateTime? @map("deleted_at") @db.Timestamptz(6)
  comment                      String?   @db.VarChar(500)
  associationMember            Boolean   @default(false) @map("association_member")
  benefactorCampaign           Boolean   @default(false) @map("benefactor_campaign")
  benefactorPlatform           Boolean   @default(false) @map("benefactor_platform")
  companyOtherText             String?   @map("company_other_text") @db.VarChar(100)
  companySponsor               Boolean   @default(false) @map("company_sponsor")
  companyVolunteer             Boolean   @default(false) @map("company_volunteer")
  partnerBussiness             Boolean   @default(false) @map("partner_bussiness")
  partnerNpo                   Boolean   @default(false) @map("partner_npo")
  partnerOtherText             String?   @map("partner_other_text") @db.VarChar(100)
  roleAssociationMember        Boolean   @default(false) @map("role_association_member")
  roleBenefactor               Boolean   @default(false) @map("role_benefactor")
  roleCompany                  Boolean   @default(false) @map("role_company")
  rolePartner                  Boolean   @default(false) @map("role_partner")
  roleVolunteer                Boolean   @default(false) @map("role_volunteer")
  volunteerBackend             Boolean   @default(false) @map("volunteer_backend")
  volunteerDesigner            Boolean   @default(false) @map("volunteer_designer")
  volunteerDevOps              Boolean   @default(false) @map("volunteer_dev_ops")
  volunteerFinancesAndAccounts Boolean   @default(false) @map("volunteer_finances_and_accounts")
  volunteerFrontend            Boolean   @default(false) @map("volunteer_frontend")
  volunteerLawyer              Boolean   @default(false) @map("volunteer_lawyer")
  volunteerMarketing           Boolean   @default(false) @map("volunteer_marketing")
  volunteerProjectManager      Boolean   @default(false) @map("volunteer_project_manager")
  volunteerQa                  Boolean   @default(false) @map("volunteer_qa")
  volunteerSecurity            Boolean   @default(false) @map("volunteer_security")
  person                       Person    @relation(fields: [personId], references: [id])

  @@map("supporters")
}

model City {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(100)
  postalCode  Int           @unique @map("postal_code")
  countryId   String        @map("country_id") @db.Uuid
  countryCode Country       @relation(fields: [countryId], references: [id])
  Beneficiary Beneficiary[]

  @@map("cities")
}

model Country {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @db.VarChar(100)
  countryCode String @unique @map("country_code") @db.Citext
  City        City[]

  @@map("countries")
}

model Vault {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type           VaultType
  amount         Decimal        @default(0.0)
  currency       Currency       @default(BGN)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  Person         Person[]
  Expense        Expense[]
  Campaign       Campaign[]
  Withdraw       Withdraw[]
  Transaction    Transaction[]
  Subscription   Subscription[]
  SourceTransfer Transfer[]     @relation("source")
  TargetTransfer Transfer[]     @relation("target")

  @@map("vaults")
}

model Transaction {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            TransactionType
  status          TransactionStatus @default(initial)
  provider        PaymentProvider   @default(none)
  /// Vault where the funds are going
  targetVaultId   String            @map("target_vault_id") @db.Uuid
  /// Payment provider attributes
  customerId      String            @map("customer_id")
  paymentIntentId String            @map("payment_intent_id")
  paymentMethodId String            @map("payment_method_id")
  ///
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @updatedAt @map("updated_at") @db.Timestamptz(6)
  targetVault     Vault             @relation(fields: [targetVaultId], references: [id])

  @@map("transactions")
}

/// Subscribe to donate on monthly basis
model Subscription {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status         SubscriptionStatus
  vaultId        String             @map("vault_id") @db.Uuid
  personId       String             @map("person_id") @db.Uuid
  /// Payment provider Subscription id
  subscriptionId String             @map("subscription_id")
  customerId     String?            @unique @map("customer_id")
  ///
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(6)
  sourceVault    Vault              @relation(fields: [vaultId], references: [id])
  person         Person             @relation(fields: [personId], references: [id])

  @@map("subscriptions")
}

/// Move funds from one vault to another
model Transfer {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          TransferType
  amount        Decimal
  reason        String       @db.VarChar(100)
  sourceVaultId String       @map("source_vault_id") @db.Uuid
  targetVaultId String       @map("target_vault_id") @db.Uuid
  aprovedById   String?      @map("approved_by_id") @db.Uuid
  targetDate    DateTime?    @default(now()) @map("target_date")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(6)
  approvedBy    Person?      @relation(fields: [aprovedById], references: [id])
  sourceVault   Vault        @relation("source", fields: [sourceVaultId], references: [id])
  targetVault   Vault        @relation("target", fields: [targetVaultId], references: [id])

  @@map("transfers")
}

/// Remove funds from a vault to given bank account
model Withdraw {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        WithdrawType
  status      WithdrawStatus
  amount      Decimal
  vaultId     String         @map("vault_id") @db.Uuid
  documentId  String?        @map("document_id") @db.Uuid
  targetDate  DateTime?      @default(now()) @map("target_date")
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  vault       Vault          @relation(fields: [vaultId], references: [id])
  BankAccount BankAccount[]

  @@map("withdraws")
}

model BankAccount {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status            BankAccountStatus
  /// Last 4 digits of IBAN number
  last4             String
  /// Name of account holder
  accountHolderName String            @map("account_holder_name")
  accountHolderType AccountHolderType @map("account_holder_type")
  bankName          String?           @map("bank_name")
  fingerprint       String?
  withdrawId        String            @map("withdraw_id") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?         @updatedAt @map("updated_at") @db.Timestamptz(6)
  withdraw          Withdraw          @relation(fields: [withdrawId], references: [id])

  @@map("bank_accounts")
}

/// Pay for something from a given vault
model Expense {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       ExpenseType
  vaultId    String      @map("vault_id") @db.Uuid
  documentId String?     @map("document_id") @db.Uuid
  vault      Vault       @relation(fields: [vaultId], references: [id])
  document   Document?   @relation(fields: [documentId], references: [id])

  @@map("expenses")
}

model Document {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        DocumentType
  name        String
  filetype    String?
  description String?
  /// Data storage source url
  sourceUrl   String       @map("source_url")
  /// Person who uploaded the document
  ownerId     String       @map("owner_id") @db.Uuid
  owner       Person       @relation(fields: [ownerId], references: [id])
  Expense     Expense[]

  @@map("documents")
}

enum BeneficiaryType {
  individual
  company

  @@map("beneficiary_type")
}

/// https://developers.google.com/people/api/rest/v1/people?hl=pt#relation
enum PersonRelation {
  none
  myself
  myorg
  parent
  spouse
  child
  mother
  father
  brother
  sister
  friend
  relative
  partner
  domesticPartner
  manager
  assistant
  colleague

  @@map("person_relation")
}

enum CampaignState {
  initial
  draft
  pending_validation
  approved
  rejected
  active
  active_pending_validation
  suspended
  complete
  disabled
  error
  deleted

  @@map("campaign_state")
}

enum Currency {
  BGN
  EUR
  USD

  @@map("currency")
}

enum TransactionType {
  donation

  @@map("transaction_type")
}

enum TransferType {
  withdraw
  relocation

  @@map("transfer_type")
}

enum ExpenseType {
  none
  internal
  operating
  administrative
  medical
  services
  groceries
  transport
  accommodation
  shipping
  utility
  rental
  legal
  bank
  advertising
  other

  @@map("expense_type")
}

enum PaymentProvider {
  none
  stripe
  paypal
  epay
  bank
  cash

  @@map("payment_provider")
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incompleteExpired
  pastDue
  unpaid

  @@map("subscription_status")
}

enum VaultType {
  personal
  campaign

  @@map("vault_type")
}

enum DocumentType {
  invoice
  receipt
  medical_record
  other

  @@map("document_type")
}

enum TransactionStatus {
  initial
  invalid
  incomplete
  declined
  waiting
  cancelled
  succeeded
  deleted
  refund
  paymentRequested

  @@map("transaction_status")
}

enum WithdrawType {
  cash
  bank

  @@map("payout_type")
}

enum WithdrawStatus {
  initial
  invalid
  incomplete
  declined
  cancelled
  succeeded

  @@map("payout_status")
}

enum AccountHolderType {
  individual
  company

  @@map("account_holder_type")
}

/// https://stripe.com/docs/api/customer_bank_accounts/object
enum BankAccountStatus {
  new
  validated
  verified
  verification_failed
  errored

  @@map("bank_account_status")
}
